<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-the-c-sdk-and-assembly" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>The C SDK and assembly</title>
    <introduction>
        <p>
            The Raspberry Pi foundation provides an excellent <term>software
            development kit</term>, or SDK. The SDK is a library of C functions
            that facilitate application development on the Pico. In that regard,
            it is a bit like CircuitPython. The difference is that CircuitPython
            runs in an interpreter that the Pico itself hosts.
            Different Pico peripherals, or more advanced code for fancier
            CircuitPython boards, may require more CircuitPython libraries,
            and these have to be provided to the Pico board for it to run such code.
            Any definitions required at runtime have to be available this way.
        </p>
        <p>
            In contrast, C code is compiled into machine code (ARM assembly) that
            the Pico can run directly. The machine code is a sequence of instructions
            encoded as bit patterns. The Pico can run these instructions directly,
            if the bit patterns are stored in its memory. The C SDK provides a
            library of functions that can be called from C code, and that are
            compiled into machine code. The machine code is stored in the Pico's
            memory, and the Pico can run it directly. No interpreter or libraries
            are required at runtime. Thus, software written in C can be more
            efficient than software written in CircuitPython. This efficiency is
            realized both in terms of speed and in terms of memory usage.
        </p>
        <p>
            Moreover, advanced boards often have facilities that cannot be used,
            or can only partially be used, from CircuitPython. For example, the
            Pico has a <term>programmable input/output</term>, or <term>PIO</term>,
            that can be used to implement custom hardware interfaces. The PIO
            is not fully accessible from CircuitPython. Other typical exceptions
            include most interrupt facilities, and some features of asynchronous
            or concurrent programming. These features are available from C.
        </p>
        <p>
            The machine code is difficult to read directly, because it is encoded
            in bit patterns. However, there is a human-readable form of this machine
            code, called assembly language. The assembly is equivalent to the
            compiled machine code, but it is easier to read and understand. Every
            CS student should have some understanding of machine code and assembly,
            because the way it all works has had a profound influence on the
            design of many popular high-level languages, including Python.
        </p>
        <p>
            In this chapter, we introduce the C SDK and assembly. We will use
            the C SDK to write some simple programs, and we will study the
            form of assembly programming in order to write some very simple
            assembly code. For the most part, we will make free use of the
            SDK to simplify our lives. It is challenging for even experience
            programmers to write assembly code, and we will not attempt to
            do so in any serious way. You may never write another line of
            assembly after this, but your appreciation of the work done for
            you by the authors of compilers, interpreters, and so on, will
            last a lifetime. Moreover it is often helpful to be able to read
            assembly code during debugging.
        </p>
        <p>
            The days when human programmers could write more efficient code
            than compilers are past, but still within living memory. However,
            today's compilers would really be hard to beat. Folks who write
            assembly today do it for the love of the game. There are even
            literal games featuring assembly programming, for example
            Shenzhen IO from Zachtronics (available on Steam, e.g.).
        </p>
    </introduction>
    <section xml:id="sec-using-the-sdk-on-codespaces">
        <title>Using the SDK on Codespaces</title>
        <p>
            Before you begin: copy any files you want to save from your
            Pi Pico to a safe location on your laptop (like the Downloads
            folder). They may be preserved, but we shouldn't count on it.
        </p>
        <p>
            <ol marker="1.">
                <li>
                    <p>
                        Visit the <url href="https://github.com/daverosoff/pico-c-sandbox">Pico C
                        Sandbox</url> and fork the repository.
                        <image source="github-fork-repo.png" width="90%">
                            <description>The fork button is in the upper right part of the Github repository page.</description>
                        </image>
                    </p>
                </li>
                <li>
                    <p>
                        After the fork process is complete, you should be able to visit your fork.
                        This is a copy of my <c>pico-c-sandbox</c> repo that belongs to you. Make
                        sure that the title of the page is <c>&lt;your-github-name&gt;/pico-c-sandbox</c>
                        and click the big green Code button. Then, use the Codespaces tab to
                        <q>create a new Codespace on main</q>
                        from your fork. This will take a few minutes, and then you will see
                        a VS Code window in your browser. Find the Terminal tab and open it.
                        You should see a <term>prompt</term> that looks like this:
                        <cd>
                            <cline>@your-github-name /workspaces/pico-c-sandbox (main) $ </cline>
                        </cd>
                        The prompt indicates the console is waiting for a command. To save room
                        we compress the prompt to just the <c>$</c> character. You will type everything
                        after the <c>$</c> character on the same line. The text you type appears
                        in a boldface font. The text the console prints in response appears in
                        a normal font. The console prints a blank line after each command.
                    </p>
                </li>
                <li>
                    <p>
                        Run the following commands, pressing Enter after you type each one:
                        <console prompt="$ ">
                            <input>git clone https://github.com/raspberrypi/pico-sdk.git pico/pico-sdk</input>
                            <output>Cloning into 'pico/pico-sdk'...</output>
                            <input>git clone https://github.com/raspberrypi/pico-examples.git pico/pico-examples</input>
                            <output>Cloning into 'pico/pico-examples'...</output>
                            <input>cd pico/pico-sdk</input>
                            <output/>
                            <input>git submodule update --init</input>
                            <output>(a lot of output)</output>
                            <input>cd ../..</input>
                            <output/>
                            <input>sudo apt update</input>
                            <output>(a lot of output)</output>
                            <input>sudo apt install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential</input>
                            <output>(a lot of output)</output>
                        </console>
                    </p>
                </li>
                <li>
                    <p>
                        These commands install the compiler itself, the SDK, and some example code. Most of them produce a
                        lot of output, which we have omitted here. The <c>cd</c> command changes the current directory to
                        the one specified. The <c>sudo</c> command runs the following command as the superuser, which is
                        required to install software. The <c>apt</c> command is the package manager for Debian Linux, which
                        we are running in this Codespace.
                    </p>
                </li>
                <li>
                    <p>
                        Now, use <c>F1</c> key to bring up the Command Palette. This is the best way to run
                        commands in VS Code. Type <c>CMake</c> and select <c>CMake: Configure</c> from the list of
                        commands that appears. If you are asked to select a kit, choose <c>gcc-arm-none-eabi</c>.
                        This will take a few minutes, and you will see a lot of output in the console. When it is
                        done, you will see a message like this:
                        <console prompt="$ ">
                            <output>Configuring done</output>
                            <output>Generating done</output>
                            <output>Build files have been written to: /workspaces/pico-c-sandbox/build</output>
                        </console>
                        You will also see some activity in the status bar at the bottom of the window indicating
                        that CMake is doing its configuring.
                    </p>
                </li>
            </ol>
        </p>
        <p>
            When the configuring is done, you are ready to compile and run some code!
        </p>
    </section>
    <section xml:id="sec-compiling-and-running-c-code">
        <title>Compiling and running C code</title>
        <p>
            The Pico SDK comes with a lot of example code. We will use some of it to get started.
            The example code is in the <c>pico-examples</c> directory. We will use the <c>blink</c>
            example, which blinks the LED on the Pico board. The code is in the <c>blink</c>
            subdirectory, in a file called <c>blink.c</c>. We will compile it and
            run it.
        </p>
        <p>
            <ol marker="1.">
                <li>
                    <p>
                        Use the Explorer pane at left (click the icon that looks like two pages until you see it) to open the
                        <c>pico/pico-examples/blink</c> directory. You should see a file called <c>blink.c</c>.
                        If you don't see the file, make sure you haven't accidentally opened the <c>blink</c>
                        subdirectory of the toplevel <c>build</c> folder.
                    </p>
                </li>
                <li>
                    <p>
                        Inspect the code and try to guess what it will do.
                    </p>
                </li>
                <li>
                    <p>
                        To compile, press <c>F1</c> to bring up the Command Palette, type <c>CMake</c>, and
                        select <c>CMake: Build Target</c>. Select the <q>blink (executable)</q> target from
                        the dropdown list. If you select <c>CMake: Build</c> instead, it will
                        try to compile all the targets in the <c>pico-examples</c> directory, which will take
                        a long time. If you are asked to select <c>CMakeLists.txt</c> file, you need to press
                        Escape and use the Command Palette to r1un
                        the <c>CMake: Configure</c> command and choose <c>gcc 9.2.1 (arm-none-eabi)</c> before
                        running <c>CMake: Build Target</c> again.
                    </p>
                </li>
                <li>
                    <p>
                        You will see a lot of output in the console. Even a simple program like this one makes
                        use of many parts of the SDK, which themselves need to be compiled into machine code
                        along with our <c>blink.c</c> file. Those bits of binary need to be linked together
                        into a single executable file. The linker is a program that does this. The linker
                        is invoked by the compiler, which is invoked by CMake, which is invoked by VS Code.
                    </p>
                    <p>
                        On subsequent runs, the compiler will only compile the parts that have changed,
                        and the linker will only link the parts that have changed, which
                        is why the compile is so much faster the second time.
                    </p>
                </li>
                <li>
                    <p>
                        If you see a message like <q>Exit code 0</q> in the console, that is success. Go
                        back to the Explorer pane and find the <c>build/blink/blink.uf2</c> file. Right-click
                        to download this file. It is the executable file that we will run on the Pico.
                        It is completely self-contained as a <q>bare metal</q> executable, also known as
                        <em>firmware</em>. There is no operating system or any other code between the <c>blink</c>
                        program and the processor.
                    </p>
                </li>
                <li>
                    <p>
                        Plug your Pico into your laptop using a USB cable <em>while holding down the
                        white boot-select button on the Pico board</em>. Only let go of the button
                        once the board is plugged in. You should see a new drive
                        appear in your file explorer (not the Explorer pane in VS Code).
                        It should be called <c>RPI-RP2</c>. Drag the
                        UF2 file from the file explorer to the <c>RPI-RP2</c> drive. This will copy
                        the file to the Pico. The Pico will automatically reboot and run the program.
                    </p>
                </li>
                <li>
                    <p>
                        You should see the LED blinking immediately (unlike with the CircuitPython examples,
                        which take a second or two to begin executing). If you do, congratulations! You have
                        successfully compiled and run your first C program on the Pico! If not, get some help.
                    </p>
                </li>
            </ol>
        </p>
        <p>
            Now that you have successfully run a program, it's time to try modifying it.
            Change the blink times to other values, so that they will be visibly different
            from the default. Notice the time values are given in milliseconds, so the
            sample code blinks the LED on for 250 milliseconds and off for 250 milliseconds.
            Then, save your code and try to compile (<c>CMake: Build Target</c>) it again.
        </p>
        <p>
            You will need to repeat the steps of downloading the UF2, rebooting your Pico
            with the white button held down, and transferring the file every time you want
            to make a change. If this seems cumbersome in comparison to CircuitPython,
            well, it is. But remember, you are changing the entire firmware of the board.
        </p>
        <p>
            With CircuitPython, the Pico runs a Python interpreter as part of its firmware.
            This interpreter is smart enough to sense when the <c>code.py</c> file has changed
            and reset the board at that time. With the UF2, we don't have this flexibility,
            because there is no interpreter or any other kind of supervising program running
            on the Pico. The Pico is running the <c>blink</c> program directly, and it has no
            way of knowing when the <c>blink.c</c> file has changed. So we have to do it
            manually.
        </p>
        <exercises xml:id="exercises-led-activities-c">
            <exercise>
                <statement>
                    <p>
                        Research how to use the GPIO pins with the SDK. The on-board LED
                        is actually controlled by a GPIO pin 25. So you shouldn't have to
                        change much to get your external LEDs to blink one by one.
                    </p>
                </statement>
            </exercise>
            <exercise>
                <statement>
                    <p>
                        Setting all the pins at once might be more challenging. You will
                        need to make use of
                    </p>
                </statement>
            </exercise>

        </exercises>
    </section>
</chapter>
