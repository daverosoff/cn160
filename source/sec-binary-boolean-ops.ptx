<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-binary-boolean-operators">
    <title>Binary boolean operators</title>
    <p>
        The set of <term>boolean values</term> is the set <m>\{0, 1\}</m>.
        Usually we think of <m>0</m> as the value <q>false</q> and <m>1</m>
        as the value <q>true</q>. In this
        section, the word <em>function</em> is used in its mathematical sense.
        Such a function can be thought of as a black box that converts its inputs
        into an output. The inputs are also called <em>arguments</em> and the output
        is called the <em>value</em> of the function. The set of all possible inputs
        of a function <m>T</m> is called the <em>domain</em> of <m>T</m>. The set
        of all possible outputs of <m>T</m> is called the <em>codomain</em> of <m>T</m>.
    </p>
    <p>
        A <term>boolean function</term> is a function that returns a boolean value. A
        <term>boolean operator</term> is a function that takes only boolean values
        as inputs and
        returns a boolean value.
    </p>
    <p>
        A <term>binary boolean operator</term> is a boolean operator that takes two
        boolean values as inputs. We usually use infix notation instead of functional
        notation to represent them. This means a symbol like <m>T</m> is placed
        between the two inputs <m>x</m> and <m>y</m> like this: <m>x T y</m> to represent the operator
        instead of using the functional notation <m>T(x, y)</m>. For such operators, we often
        use symbols that look more like arithmetic operators, e.g., <m>\circ</m>, than function names.
    </p>
    <p>
        A binary boolean operator is <term>commutative</term>
        if the order of the inputs does not affect the output. In symbols, and representing
        the operator, <m>\circ</m>, we have
        <me>
            x \circ y = y \circ x \quad \text{for all $x$, $y$ in the domain of $\circ$}
        </me>
        as the defining property of commutativity.
    </p>
    <p>
        There are six nonconstant binary boolean operators that are commutative. They are given
        in the tables below. Tables like these are called <term>truth tables</term>,
        because they help us determine when a boolean expression (a combination of
        boolean values and boolean operators) is true and when it is false.
    </p>
    <note>
        <p>
            We saw truth tables displayed in a slightly different format in class.
            This new format is helpful when computing truth tables of complex expressions.
            One can add columns for bigger and bigger subexpressions, working one's
            way up to the full expression.
        </p>
    </note>
    <sbsgroup widths="46% 46%" margins="3%" valigns="top top">
        <sidebyside>
            <table>
                <title>Or <m>\left(\vee\right)</m></title>
                <tabular halign="center">
                    <row header="yes" bottom="minor">
                        <cell><m>x</m></cell>
                        <cell><m>y</m></cell>
                        <cell><m>x \vee y</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                </tabular>
            </table>
            <table>
                <title>And <m>\left(\wedge\right)</m></title>
                <tabular halign="center">
                    <row header="yes" bottom="minor">
                        <cell><m>x</m></cell>
                        <cell><m>y</m></cell>
                        <cell><m>x \wedge y</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                </tabular>
            </table>
        </sidebyside>
        <sidebyside>
            <table>
                <title>Nor</title>
                <tabular halign="center">
                    <row header="yes" bottom="minor">
                        <cell><m>x</m></cell>
                        <cell><m>y</m></cell>
                        <cell><m>x \text{ NOR } y</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                </tabular>
            </table>
            <table>
                <title>Nand</title>
                <tabular halign="center">
                    <row header="yes" bottom="minor">
                        <cell><m>x</m></cell>
                        <cell><m>y</m></cell>
                        <cell><m>x \text{ NAND } y</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                </tabular>
            </table>
        </sidebyside>
        <sidebyside>
            <table>
                <title>Xor <m>\left(\veebar\right)</m></title>
                <tabular halign="center">
                    <row header="yes" bottom="minor">
                        <cell><m>x</m></cell>
                        <cell><m>y</m></cell>
                        <cell><m>x \veebar y</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                </tabular>
            </table>
            <table>
                <title>Xnor</title>
                <tabular halign="center">
                    <row header="yes" bottom="minor">
                        <cell><m>x</m></cell>
                        <cell><m>y</m></cell>
                        <cell><m>x \text{ XNOR } y</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                    <row>
                        <cell><m>0</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>0</m></cell>
                        <cell><m>0</m></cell>
                    </row>
                    <row>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                        <cell><m>1</m></cell>
                    </row>
                </tabular>
            </table>
        </sidebyside>
    </sbsgroup>
    <p>
        Instead of introducing symbols for NOR, NAND, and XNOR, we can
        make use of symbols for a unary NOT operator as described in class.
        We will write <m>\neg x</m> for <m>\text{NOT } x</m>, and we will
        also use the overbar to negate a boolean expression. So, for example,
        <m>\neg x = \overline{x}</m>, and
        <me>
            \overline{x \wedge y} = \neg (x \wedge y) = \text{NOT } (x \wedge y)
        </me>
        and all three expressions are synonymous.
    </p>

    <activity>
        <title>Truth tables and De Morgan's Laws</title>
        <introduction>
            <p>
                Make a truth table for each of the following expressions.
                Each expression is a binary boolean expression, so it
                has two boolean values as inputs and returns a boolean value.
                It need not be commutative, so your truth table might
                or might not
                be one of the eight special ones above. For each expression,
                decide whether it in fact represents one of our six named
                operators (by looking at the truth table you made).
            </p>
        </introduction>
        <task xml:id="task-demorgan-and">
            <statement>
                <p>
                    <m>\overline{x} \vee \overline{y}</m>
                </p>
            </statement>
            <hint>
                <p>
                    Make the truth table. Is it one of the six special ones?
                </p>
            </hint>
        </task>
        <task xml:id="task-demorgan-or">
            <statement>
                <p>
                    <m>\overline{x} \wedge \overline{y}</m>
                </p>
            </statement>
        </task>
    </activity>
    <!-- <p>
        Let us now introduce symbols for NAND and NOR inspired by the
        symbols we are already using. Since <m>x \text{ NAND } y =
            \overline{x \wedge y}</m>, we write <m>\barwedge</m> for
        NAND. Similarly, since <m>x \text{ NOR } y = \overline{x \vee y}</m>,
        we write <m>\barvee</m> for NOR.
    </p>
    <warning>
        <p>
            The notations <m>\barwedge</m> and <m>\barvee</m> are not
            standard. They are used here only to make the connection
            between NAND and NOR and the other operators we have
            introduced.
        </p>
    </warning> -->
    <activity xml:id="activity-nor-is-universal">
        <title>Universal gates</title>
        <task>
            <statement>
                <p>
                    Use a single NOR operator to express <m>\neg x</m>.
                </p>
            </statement>
            <hint>
                <p>
                    The NOR operator has two inputs, and you only have
                    <m>x</m>. What can you do?
                </p>
            </hint>
            <answer>
                <p>
                    <m>\neg x = x \text{ NOR } x</m>.
                </p>
            </answer>
        </task>
        <task xml:id="task-nor-and">
            <statement>
                <p>
                    Use the result of <xref ref="task-demorgan-and"/> to
                    express <m>x \wedge y</m> using only the NOR operator.
                    (You can use as many NORs as you need.)
                </p>
            </statement>
        </task>
        <task xml:id="task-nor-or">
            <statement>
                <p>
                    Use the result of <xref ref="task-demorgan-or"/> to
                    express <m>x \vee y</m> using only the NOR operator.
                    (You can use as many NORs as you need.)
                </p>
            </statement>
        </task>
        <task>
            <statement>
                <p>
                    Use NOR operators to express <m>x \veebar y</m>.
                </p>
            </statement>
            <hint>
                <p>
                    Use the results of <xref ref="task-nor-and"/> and
                    <xref ref="task-nor-or"/>.
                </p>
            </hint>
        </task>
    </activity>
    <remark xml:id="remark-nor-is-universal">
        <p>
            In doing <xref ref="activity-nor-is-universal"/>, you showed
            that the NOR operator is a <term>universal gate</term>.
            This means that any boolean function can be expressed using only NORs.
            To spell it out, we used NORs to express <m>\neg x</m>, <m>x \wedge y</m>,
            <m>x \vee y</m>, and <m>x \veebar y</m>. The remaining operators, NAND
            and XNOR, can be expressed in terms of these four. This shows that
            all six binary boolean operators are expressible in terms of NOR
            alone.
        </p>
    </remark>
    <p>
        <xref ref="remark-nor-is-universal"/> is interesting from a hardware point
        of view. We will soon begin to explore the manner in which digital computers
        are constructed from logic gates. A logic gate is the basic building block
        of a digital electronic circuit, much like a statement is the building block
        of a Python program.
    </p>
    <p>
        Because NOR is a universal gate, it is possible to build a computer using
        only NOR gates. They are cheaper to manufacture than AND and OR gates,
        and even NOT gates are expressible in terms of NOR. They also are faster:
        every gate through which a signal passes adds a small delay to the circuit.
        These are only measured in nanoseconds, but when you have millions of gates,
        it adds up. NOR gates require less internal wiring than AND and OR gates,
        so they are faster.
    </p>
    <p>
        In Homework 1 you will show that NAND is similarly universal. The idea is
        similar to the one above, but you will have to work out the details yourself.
    </p>
</section>
