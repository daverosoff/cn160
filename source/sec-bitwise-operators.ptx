<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-bitwise-operators">
    <title>Bitwise operators</title>
    <introduction>
        <p>
            Let us adopt the terminology <term>bit pattern</term> or
            <term>word</term> for a sequence of bits of a fixed length.
            This way we do not need to be specific about the length of the
            bit pattern or think about what integer it might (or might not)
            represent. All data handled by digital computers is ultimately
            represented as bit patterns.
        </p>
        <p>
            The bitwise operators are applied to bit patterns. They are
            <term>binary operators</term>, meaning that they take two
            operands. The operands must be of the same length, and the
            result is a bit pattern of the same length. The bitwise
            operators are:
            <ol>
                <li>
                    <p>
                        <term>Bitwise AND</term> &amp; is a binary
                        operator that takes two bit patterns of the same length
                        and returns a bit pattern of the same length. The
                        resulting bit pattern has a 1 bit in each position where
                        both operands have a 1 bit, and a 0 bit in all other
                        positions.
                    </p>
                </li>
                <li>
                    <p>
                        <term>Bitwise OR</term> | is a binary operator
                        that takes two bit patterns of the same length and
                        returns a bit pattern of the same length. The resulting
                        bit pattern has a 1 bit in each position where at least
                        one of the operands has a 1 bit, and a 0 bit in all other
                        positions.
                    </p>
                </li>
                <li>
                    <p>
                        <term>Bitwise XOR</term> ^ is a binary operator
                        that takes two bit patterns of the same length and
                        returns a bit pattern of the same length. The resulting
                        bit pattern has a 1 bit in each position where exactly
                        one of the operands has a 1 bit, and a 0 bit in all other
                        positions.
                    </p>
                </li>
            </ol>
        </p>
        <remark>
            <p>
                In class, I previously used the symbols <m>\oplus</m> and
                <m>\odot</m> for bitwise OR and AND, respectively. In this
                section, we use different symbols, to match Python's remark:
                &amp; for bitwise AND, | for bitwise OR, and ^ for bitwise XOR.
                Bitwise versions of NAND, NOR, and XNOR do not appear in these
                notes.
            </p>
            <p>
                The bitwise NOT operator is written <m>\neg</m>. It is a unary operator,
                meaning that it takes a single operand. The operand must be a
                bit pattern, and the result is a bit pattern of the same length.
            </p>
        </remark>
        <remark>
            <p>
                If you have previous experience in C, Java, or closely related
                languages, you may have wondered why the logical operators
                AND and OR are written &amp;&amp; and || in those languages.
                It is because the single-character variants &amp; and | are
                reserved for bitwise operations.
            </p>
        </remark>
        <p>
            Some other operators on bit patterns are the <term>logical
            shift operators</term> &lt;&lt; and &gt;&gt;. These are also
            binary operators, taking a bit pattern and an integer as
            operands. The result is a bit pattern of the same length as the
            first operand. The second operand must be non-negative.
        </p>
        <example>
            <p>
                The expression <c>0b1010 &lt;&lt; 1</c> evaluates to
                <c>0b10100</c>, and the expression
                <c>0b1010 &gt;&gt; 1</c> evaluates to
                <c>0b101</c>.
            </p>
        </example>
    </introduction>
    <subsection xml:id="subsection-bitmasking">
        <title>Bitmasking</title>
        <activity>
            <statement>
                <p>
                    <ol marker="A.">
                        <li>
                            <p>
                                What operation from our previous discussion of binary-encoded
                                integers is also represented by &lt;&lt; 1? That is, if the
                                bit pattern <m>x</m> is interpreted as an integer, what
                                integer is represented by <m>x</m> &lt;&lt; 1?
                            </p>
                        </li>
                        <li>
                            <p>
                                What operation from our previous discussion of binary-encoded
                                integers is also represented by &gt;&gt; 1? That is, if the
                                bit pattern <m>x</m> is interpreted as an integer, what
                                integer is represented by <m>x</m> &gt;&gt; 1?
                            </p>
                        </li>
                    </ol>
                </p>
            </statement>
        </activity>
        <p>
            Recall that bitwise operators return values of the same length as their
            operands. Therefore, the bitwise operators
            behave in the following way for a few 4-bit patterns:
        </p>
        <example>
            <table>
                <title>The fixed-width nature of bitwise operators</title>
                <tabular halign="center">
                    <row header="yes" bottom="minor">
                        <cell><m>x</m></cell>
                        <cell><m>y</m></cell>
                        <cell><m>\neg x</m></cell>
                        <cell><m>\neg y</m></cell>
                        <cell><m>x \&amp; y</m></cell>
                        <cell><m>x | y</m></cell>
                        <cell><m>x \text{\^{}} y</m></cell>
                    </row>
                    <row>
                        <cell><m>1100</m></cell>
                        <cell><m>1010</m></cell>
                        <cell><m>0011</m></cell>
                        <cell><m>0101</m></cell>
                        <cell><m>1000</m></cell>
                        <cell><m>1110</m></cell>
                        <cell><m>0110</m></cell>
                    </row>
                    <row>
                        <cell><m>0000</m></cell>
                        <cell><m>1111</m></cell>
                        <cell><m>1111</m></cell>
                        <cell><m>0000</m></cell>
                        <cell><m>0000</m></cell>
                        <cell><m>1111</m></cell>
                        <cell><m>1111</m></cell>
                    </row>
                    <row>
                        <cell><m>10111111</m></cell>
                        <cell><m>00000010</m></cell>
                        <cell><m>01000000</m></cell>
                        <cell><m>11111101</m></cell>
                        <cell><m>00000010</m></cell>
                        <cell><m>10111111</m></cell>
                        <cell><m>10111101</m></cell>
                    </row>
                </tabular>
            </table>
        </example>
        <activity>
            <statement>
                <p>
                    What is the effect of applying bitwise AND to a bit pattern
                    <m>x</m> and the word <m>111\ldots0</m> of the same length?
                </p>
            </statement>
        </activity>
        <activity>
            <statement>
                <p>
                    What is the effect of applying bitwise OR to a bit pattern
                    <m>x</m> and the word <m>000\ldots1</m> of the same length?
                </p>
            </statement>
        </activity>
        <activity>
            <statement>
                <p>
                    How would you use a similar idea to toggle the last bit
                    of <m>x</m>? That is, how would you use a bitwise operation
                    to change the last bit of <m>x</m> from 0 to 1 or from 1 to 0?
                    You cannot use a conditional statement.
                </p>
            </statement>
        </activity>
    </subsection>
</section>
