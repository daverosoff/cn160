<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="sec-assignments" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Assignments</title>
  <section xml:id="assignments-day00">
    <title>Problems for Monday, Jan 8</title>
    <p>
      Make sure you can solve all of these problems. Similar ones will appear
      on the midterm. As always in courses at this level, <q>solve</q> means
      to give complete supporting reasoning or justification, not just the answer.
      In this case you should include the details of your calculation, however
      you do it.
    </p>
    <exercises xml:id="exercises-day00">
      <exercise>
        <introduction>
          <p>
            For each problem below, interpret the summands as binary-encoded integers
            and find the sum without converting the summands to decimal.
            Express all your answers in binary, and for each problem,
            show a complete record of your reasoning. This could be a collection of
            <m>1 \to 2</m>
            machines as in the videos we saw in class, a pencil-and-paper addition with
            carries, or anything else that shows me how you came up with your answer.
          </p>
        </introduction>
        <task>
          <statement>
            <p>Add the following binary numbers: <m>1011 + 1101</m></p>
          </statement>
          <answer>
            <p>
              11000.
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Perform the binary addition: <m>11100 + 1011</m></p>
          </statement>
          <answer>
            <p>
              100111.
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Add the binary numbers: <m>10010 + 1101</m></p>
          </statement>
          <answer>
            <p>
              11111.
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Compute the sum: <m>1111 + 101</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Perform binary addition: <m>101010 + 11011</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the binary values: <m>1111 + 111</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Compute the sum of: <m>10101 + 110</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the binary numbers: <m>110110 + 1011</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Perform binary addition: <m>1111 + 1001</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the binary values: <m>101010 + 110</m></p>
          </statement>
        </task>
      </exercise>
      <exercise>
        <introduction>
          <p>
            For each problem below, interpret the summands as hexadecimal-encoded integers
            and find the sum without converting the summands to decimal. (You are allowed
            to convert them to binary, but I don't necessarily recommend it.)
            Express all your answers in hex, and for each problem,
            show a complete record of your reasoning. This could be a collection of
            <m>1 \to 2</m> or <m>1 \to 16</m>
            machines as in the videos we saw in class, a pencil-and-paper addition with
            carries, or anything else that shows me how you came up with your answer.
          </p>
        </introduction>
        <task>
          <statement>
            <p>Add the hexadecimal values: <m>C_{16} + 7_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>13_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Perform the sum: <m>F2_{16} + 4_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>F6_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Compute the sum: <m>1D_{16} + A_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>27_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Perform the sum: <m>1F_{16} + A_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>1A_{16} + 2F_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>49_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Compute the sum: <m>3B_{16} + 4D_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal values: <m>A1_{16} + B2_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>153_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>2C_{16} + 13_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Compute the sum: <m>1AB_{16} + 2F_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>3E_{16} + 25_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>A7 + F9</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>C5 + 13B</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>124 + 17C</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>1F3 + 1A7</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>266 + 1C2</m></p>
          </statement>
        </task>
      </exercise>
    </exercises>
  </section>
  <section xml:id="sec-assignment-day04">
    <title>Problems for Thursday, January 11</title>
    <p>
      Work on these problems in groups of 2<ndash/>3
      while the instructor catches up on grading
      projects 00 and 01. For Python coding problems, you can save
      more files on your Pico (make sure not to overwrite <c>code.py</c>).
      Use the Serial console in Mu editor to
      see the output of your programs.
    </p>
    <exercises xml:id="exercises-day04">
      <exercise>
        <statement>
          <p>
            Write a function <c>is_even(x)</c> that takes a single integer
            argument <c>x</c> and returns <c>True</c> if the argument is even and
            <c>False</c> otherwise. You may assume that the argument is
            a nonnegative integer (do <em>not</em> validate within your
            function). You may <em>not</em> use the <c>%</c> operator.
            Only use bitwise operators and equality comparison.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a function <c>bit_is_set(x, n)</c> that takes two integer
            arguments <c>x</c> and <c>n</c> and returns <c>True</c> if the
            <c>n</c>th bit of <c>x</c> is set and <c>False</c> otherwise.
            You may assume that the arguments are nonnegative integers
            (do <em>not</em> validate within your function). You may <em>not</em>
            use the <c>%</c> operator. Only use bitwise operators and
            equality comparison.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a function <c>set_bit(x, n)</c> that takes two integer
            arguments <c>x</c> and <c>n</c> and returns the value of <c>x</c>
            with the <c>n</c>th bit set. You may assume that the arguments are
            nonnegative integers (do <em>not</em> validate within your function).
            You may <em>not</em> use the <c>%</c> operator. Only use bitwise
            operators and equality comparison.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a function <c>clear_bit(x, n)</c> that takes two integer
            arguments <c>x</c> and <c>n</c> and returns the value of <c>x</c>
            with the <c>n</c>th bit cleared. You may assume that the arguments
            are nonnegative integers (do <em>not</em> validate within your
            function). You may <em>not</em> use the <c>%</c> operator. Only use
            bitwise operators and equality comparison.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a function <c>toggle_bit(x, n)</c> that takes two integer
            arguments <c>x</c> and <c>n</c> and returns the value of <c>x</c>
            with the <c>n</c>th bit toggled. You may assume that the arguments
            are nonnegative integers (do <em>not</em> validate within your
            function). You may <em>not</em> use the <c>%</c> operator. Only use
            bitwise operators and equality comparison.
          </p>
        </statement>
      </exercise>
    </exercises>
  </section>
</chapter>
