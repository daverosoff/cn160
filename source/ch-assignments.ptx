<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="sec-assignments" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Assignments</title>
  <section xml:id="assignments-day00">
    <title>Problems for Monday, Jan 8</title>
    <p>
      Make sure you can solve all of these problems. Similar ones will appear
      on the midterm. As always in courses at this level, <q>solve</q> means
      to give complete supporting reasoning or justification, not just the answer.
      In this case you should include the details of your calculation, however
      you do it.
    </p>
    <exercises xml:id="exercises-day00">
      <exercise>
        <introduction>
          <p>
            For each problem below, interpret the summands as binary-encoded integers
            and find the sum without converting the summands to decimal.
            Express all your answers in binary, and for each problem,
            show a complete record of your reasoning. This could be a collection of
            <m>1 \to 2</m>
            machines as in the videos we saw in class, a pencil-and-paper addition with
            carries, or anything else that shows me how you came up with your answer.
          </p>
        </introduction>
        <task>
          <statement>
            <p>Add the following binary numbers: <m>1011 + 1101</m></p>
          </statement>
          <answer>
            <p>
              11000.
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Perform the binary addition: <m>11100 + 1011</m></p>
          </statement>
          <answer>
            <p>
              100111.
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Add the binary numbers: <m>10010 + 1101</m></p>
          </statement>
          <answer>
            <p>
              11111.
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Compute the sum: <m>1111 + 101</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Perform binary addition: <m>101010 + 11011</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the binary values: <m>1111 + 111</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Compute the sum of: <m>10101 + 110</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the binary numbers: <m>110110 + 1011</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Perform binary addition: <m>1111 + 1001</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the binary values: <m>101010 + 110</m></p>
          </statement>
        </task>
      </exercise>
      <exercise>
        <introduction>
          <p>
            For each problem below, interpret the summands as hexadecimal-encoded integers
            and find the sum without converting the summands to decimal. (You are allowed
            to convert them to binary, but I don't necessarily recommend it.)
            Express all your answers in hex, and for each problem,
            show a complete record of your reasoning. This could be a collection of
            <m>1 \to 2</m> or <m>1 \to 16</m>
            machines as in the videos we saw in class, a pencil-and-paper addition with
            carries, or anything else that shows me how you came up with your answer.
          </p>
        </introduction>
        <task>
          <statement>
            <p>Add the hexadecimal values: <m>C_{16} + 7_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>13_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Perform the sum: <m>F2_{16} + 4_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>F6_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Compute the sum: <m>1D_{16} + A_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>27_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Perform the sum: <m>1F_{16} + A_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>1A_{16} + 2F_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>49_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Compute the sum: <m>3B_{16} + 4D_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal values: <m>A1_{16} + B2_{16}</m></p>
          </statement>
          <answer>
            <p>
              <m>153_{16}</m>
            </p>
          </answer>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>2C_{16} + 13_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Compute the sum: <m>1AB_{16} + 2F_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>3E_{16} + 25_{16}</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>A7 + F9</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>C5 + 13B</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>124 + 17C</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>1F3 + 1A7</m></p>
          </statement>
        </task>
        <task>
          <statement>
            <p>Add the hexadecimal numbers: <m>266 + 1C2</m></p>
          </statement>
        </task>
      </exercise>
    </exercises>
  </section>
  <section xml:id="sec-assignment-day04">
    <title>Problems for Thursday, January 11</title>
    <p>
      Work on these problems in groups of 2<ndash/>3
      while the instructor catches up on grading
      projects 00 and 01. For Python coding problems, you can save
      more files on your Pico (make sure not to overwrite <c>code.py</c>).
      Use the Serial console in Mu editor to
      see the output of your programs.
    </p>
    <exercises xml:id="exercises-day04">
      <exercise>
        <statement>
          <p>
            Write a function <c>is_even(x)</c> that takes a single integer
            argument <c>x</c> and returns <c>True</c> if the argument is even and
            <c>False</c> otherwise. You may assume that the argument is
            a nonnegative integer (do <em>not</em> validate within your
            function). You may <em>not</em> use the <c>%</c> operator.
            Only use bitwise operators and equality comparison.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a function <c>bit_is_set(x, n)</c> that takes two integer
            arguments <c>x</c> and <c>n</c> and returns <c>True</c> if the
            <c>n</c>th bit of <c>x</c> is set and <c>False</c> otherwise.
            You may assume that the arguments are nonnegative integers
            (do <em>not</em> validate within your function). You may <em>not</em>
            use the <c>%</c> operator or any loops or conditionals.
            Only use bitwise operators and
            equality comparison.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a function <c>set_bit(x, n)</c> that takes two integer
            arguments <c>x</c> and <c>n</c> and returns the value of <c>x</c>
            with the <c>n</c>th bit set. You may assume that the arguments are
            nonnegative integers (do <em>not</em> validate within your function).
            You may <em>not</em> use the <c>%</c> operator or any loops or
            conditionals. Only use bitwise
            operators and equality comparison.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a function <c>clear_bit(x, n)</c> that takes two integer
            arguments <c>x</c> and <c>n</c> and returns the value of <c>x</c>
            with the <c>n</c>th bit cleared. You may assume that the arguments
            are nonnegative integers (do <em>not</em> validate within your
            function). You may <em>not</em> use the <c>%</c> operator or
            any loops or conditionals. Only use
            bitwise operators and equality comparison.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a function <c>toggle_bit(x, n)</c> that takes two integer
            arguments <c>x</c> and <c>n</c> and returns the value of <c>x</c>
            with the <c>n</c>th bit toggled. You may assume that the arguments
            are nonnegative integers (do <em>not</em> validate within your
            function). You may <em>not</em> use the <c>%</c> operator or any
            loops or conditionals. Only use
            bitwise operators and equality comparison.
          </p>
        </statement>
      </exercise>
    </exercises>
  </section>
  <section xml:id="sec-projects">
    <title>Projects</title>
    <subsection xml:id="subsec-project-02-bitmasking">
      <title>Project 02: Bitmasking</title>
      <subsubsection xml:id="subsubsec-proj-02a">
        <title>Part A: <c>utils.py</c></title>
        <p>
          Now that we are beginning to have more than one file, it's time to
          start organizing our code. We'll do this by creating a <c>utils.py</c>
          file and moving our <c>binary_write()</c> function into it.
          The <c>code.py</c> file will be the main file, and it will import
          the <c>binary_write()</c> function from the <c>utils.py</c> directory.
        </p>
        <p>
          Use the Mu editor to open a new file on your Pico. Save and name it
          <c>utils.py</c> (put it in the top-level folder alongside
          <c>code.py</c>). Then, move (don't copy) the <c>binary_write()</c>
          function's definition into <c>utils.py</c>. You will also want to include
          any necessary import statements in <c>utils.py</c>. Now, in the
          <c>code.py</c> file, add the following line at the top:
          <cd>
            <cline>from utils import binary_write</cline>
          </cd>
          The meaning of this line is that we are importing the
          <c>binary_write()</c> function from the <c>utils.py</c> file.
          The <c>from ... import ...</c> syntax ensures that
          the short name of the function is available rather than its fully
          qualified name <c>utils.binary_write()</c>. If we do
          <c>import utils</c> instead, then we would need to
          call the function as <c>utils.binary_write()</c>.
        </p>
        <p>
          Just as we learn to separate the work of our programs into functions,
          instead of piling everything into one big main function, we should
          also separate our functions into files. This makes it easier to
          organize our code and to find things when we need to change them.
        </p>
      </subsubsection>
      <subsubsection xml:id="subsubsec-proj-02b">
        <title>Part B: Bitmasking</title>
        <p>
          Put all the function definitions from <xref ref="exercises-day04"/> into your
          <c>utils.py</c> file. You will need to add the <c>from ... import ...</c>
          statements to <c>code.py</c> to make them available.
        </p>
      </subsubsection>
      <subsubsection xml:id="subsubsec-proj-02c">
        <title>Part C: Animations</title>
        <p>
          You can create marquee-style animations by using a loop to turn on
          and off LEDs in a sequence. For example, if you have four LEDs
          connected to pins 0, 1, 2, and 3, you can create a <c>kitt</c>
          animation by turning on the first LED, then the second, then the
          third, then the fourth, then the third, then the second, then the
          first, and then repeating the process. You can use the
          <c>time.sleep()</c> function to pause between
          turning on and off the LEDs.
        </p>
        <p>
          Use the <c>binary_write()</c> function to create three different such
          animations. They shouldn't look too much alike. Each one should be enclosed
          in a function, as below. Notice there is no <c>while True</c>
          loop. We want to be able to run it only a few times, which would be
          impossible if we had an infinite loop. Do not duplicate the example as
          one of your submissions.
        </p>
        <p>
          You receive credit for Part C if you can show me three working animation
          cycles (just once through for each is fine) and the code for each uses
          <c>binary_write()</c> to turn on and off the LEDs. The <c>binary_write()</c>
          function must be imported from <c>utils.py</c>. Full credit solutions should
          make use of some of the functions from Part B.
        </p>
        <example xml:id="example-animate-kitt">
          <title>Example: <c>kitt</c> animation</title>
          <p>
            <cd>
              <cline>def animate_kitt():</cline>
              <cline>    frames = [1, 1 &lt;&lt; 1, 1 &lt;&lt; 2, 1 &lt;&lt; 3, 1 &lt;&lt; 2, 1 &lt;&lt; 1, 1] </cline>
              <cline>    for f in frames:</cline>
              <cline>        binary_write(f)</cline>
              <cline>        time.sleep(0.1)</cline>
            </cd>
          </p>
        </example>
      </subsubsection>
    </subsection>
  </section>
</chapter>
